# -*- coding: utf-8 -*-
import tkinter as tk
from tkinter import ttk
import os
import sys
import json

# 將當前目錄加入 Python 路徑
current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(current_dir)

from config_core import list_com_ports, COMMAND_FILE

class UIComponentsInput:
    def init_com_components(self):
        com_frame = ttk.Frame(self.left_panel, style="TFrame")
        com_frame.grid(row=0, column=0, sticky='ew', pady=3)  # 減少間距
        com_frame.columnconfigure(0, weight=0)  # 標籤不需要擴展
        com_frame.columnconfigure(1, weight=1)  # 下拉選單擴展
        com_frame.columnconfigure(2, weight=0)  # 按鈕不需要擴展
        com_frame.columnconfigure(3, weight=0)  # LED不需要擴展
        
        self.label_com = ttk.Label(com_frame, text='COM口:', style="TLabel")
        self.label_com.grid(row=0, column=0, sticky='w')
        
        # 獲取可用的 COM 口列表
        com_values = list_com_ports()
        
        # 創建 COM 口下拉選單
        self.combobox_com = ttk.Combobox(com_frame, values=com_values, state='readonly', width=15)
        self.combobox_com.grid(row=0, column=1, padx=5, sticky='ew')
        
        # 注意：不在這裡設定預設值，由 load_initial_settings 統一處理
        print(f"[DEBUG] init_com_components: 已創建 COM 口選單，可用 COM 口: {com_values}")
        
        # 確保 parent.handlers 存在
        refresh_command = None
        if hasattr(self.parent, 'handlers') and hasattr(self.parent.handlers, 'refresh_com_ports'):
            refresh_command = self.parent.handlers.refresh_com_ports
        else:
            # 如果 handlers 不存在，提供一個臨時的空函數
            refresh_command = lambda: None
            print("[WARNING] handlers 不存在或沒有 refresh_com_ports 方法")
        
        self.btn_refresh = tk.Button(com_frame, text='刷新', command=refresh_command,
                                   bg='#e0e0e0', fg='black', activebackground='#2196f3', activeforeground='black')
        self.btn_refresh.grid(row=0, column=2, padx=3)  # 減少間距
        
        # 增大 LED 指示燈
        self.status_canvas = tk.Canvas(com_frame, width=40, height=40, bg='white', highlightthickness=0)  # 增大尺寸
        self.status_canvas.grid(row=0, column=3, padx=3)  # 減少間距
        self.status_light = self.status_canvas.create_oval(5, 5, 35, 35, fill='black')  # 調整橢圓位置和大小
        self.led_blinking = False

    def init_cmd_components(self):
        section_frame = ttk.Frame(self.left_panel, style="TFrame")
        section_frame.grid(row=1, column=0, sticky='ew', pady=5)
        section_frame.columnconfigure(0, weight=1)
        self.section_var = tk.StringVar()
        
        # 從 command.txt 動態讀取分類
        self.sections = []  # 移除預設的 '全部指令'
        try:
            with open(COMMAND_FILE, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('==') and line.endswith('=='):
                        section_name = line.strip('=')
                        if section_name and section_name not in self.sections:
                            self.sections.append(section_name)
        except Exception as e:
            print(f"[ERROR] 讀取分類時發生錯誤: {e}")
            
        # 如果沒有讀取到任何分類，添加一個預設分類
        if not self.sections:
            self.sections = ['全部指令']
            
        # 設定預設選中的分類
        if self.sections:
            self.section_var.set(self.sections[0])
        
        # 限制每行最多顯示4個按鈕
        max_buttons_per_row = 4
        self.section_radiobuttons = []
        
        for i, sec in enumerate(self.sections):
            # 計算行和列位置
            row = i // max_buttons_per_row
            col = i % max_buttons_per_row
            
            rb = tk.Radiobutton(
                section_frame, text=sec, variable=self.section_var, value=sec, 
                command=self.update_cmd_list,
                bg='#d9d9d9', fg='black', selectcolor='#d9d9d9', 
                activebackground='#2196f3', activeforeground='white',
                indicatoron=0, relief='flat', borderwidth=1, width=8, height=1,
                font=('Microsoft JhengHei UI', int(self.parent.setup.get('UI_Font_Size', '12')))
            )
            rb.grid(row=row, column=col, padx=1, pady=1, sticky='ew')
            rb.bind("<Enter>", lambda e, b=rb: b.config(bg="#2196f3", fg='white'))
            rb.bind("<Leave>", lambda e, b=rb: self.update_radio_bg())
            self.section_radiobuttons.append(rb)
            
            # 設置列的權重，使按鈕平均分配空間
            section_frame.columnconfigure(col, weight=1)
            
        # 指令選擇區域
        cmd_frame = ttk.Frame(self.left_panel, style="TFrame")
        cmd_frame.grid(row=2, column=0, sticky='ew', pady=3)
        cmd_frame.columnconfigure(0, weight=0)  # 標籤不需要擴展
        cmd_frame.columnconfigure(1, weight=1)  # 下拉選單擴展
        
        self.label_cmd = ttk.Label(cmd_frame, text='指令:', style="TLabel")
        self.label_cmd.grid(row=0, column=0, sticky='w')
        
        # 創建指令下拉選單
        self.combobox_cmd = ttk.Combobox(cmd_frame, width=30)
        self.combobox_cmd.grid(row=0, column=1, padx=5, sticky='ew')
        self.combobox_cmd.bind("<<ComboboxSelected>>", lambda e: self.on_cmd_selected())
        
        # 指令說明標籤
        self.section_description = ttk.Label(cmd_frame, text='', style="TLabel", wraplength=300)
        self.section_description.grid(row=1, column=0, columnspan=2, sticky='w', pady=3)
        
        # 超時設定區域
        timeout_frame = ttk.Frame(self.left_panel, style="TFrame")
        timeout_frame.grid(row=3, column=0, sticky='ew', pady=3)
        timeout_frame.columnconfigure(0, weight=0)  # 標籤不需要擴展
        timeout_frame.columnconfigure(1, weight=1)  # 輸入框擴展
        timeout_frame.columnconfigure(2, weight=0)  # 標籤不需要擴展
        timeout_frame.columnconfigure(3, weight=1)  # 下拉選單擴展
        
        self.label_timeout = ttk.Label(timeout_frame, text='超時(秒):', style="TLabel")
        self.label_timeout.grid(row=0, column=0, sticky='w')
        
        # 創建超時輸入框
        self.entry_timeout = ttk.Entry(timeout_frame, width=5)
        self.entry_timeout.grid(row=0, column=1, padx=5, sticky='w')
        
        self.label_end = ttk.Label(timeout_frame, text='結束字串:', style="TLabel")
        self.label_end.grid(row=0, column=2, sticky='w')
        
        # 創建結束字串下拉選單
        self.combobox_end = ttk.Combobox(timeout_frame, width=10)
        self.combobox_end.grid(row=0, column=3, padx=5, sticky='ew')
        self.combobox_end.bind("<Return>", self.parent.handlers.on_end_string_entered)

    def get_section_description(self, section):
        # 預設描述
        descriptions = {
            '全部指令': '包含所有可用的指令',
            '單板指令2': '用於單板測試的指令集',
            '整機指令3': '用於整機測試的指令集',
            '喇叭': '用於喇叭測試的指令集'
        }
        return descriptions.get(section, f'{section} 相關指令')

    def init_ping_components(self):
        ping_frame = ttk.Frame(self.left_panel, style="TFrame")
        ping_frame.grid(row=4, column=0, sticky='ew', pady=3)
        ping_frame.columnconfigure(0, weight=0)  # 標籤不需要擴展
        ping_frame.columnconfigure(1, weight=1)  # 輸入框擴展
        ping_frame.columnconfigure(2, weight=0)  # 按鈕不需要擴展
        
        self.label_ip = ttk.Label(ping_frame, text='IP位址:', style="TLabel")
        self.label_ip.grid(row=0, column=0, sticky='w')
        
        self.entry_ip = ttk.Entry(ping_frame, width=15)
        self.entry_ip.grid(row=0, column=1, padx=5, sticky='ew')
        
        self.btn_ping = tk.Button(ping_frame, text='Ping', command=self.parent.handlers.check_ping,
                                bg='#e0e0e0', fg='black', activebackground='#2196f3', activeforeground='black')
        self.btn_ping.grid(row=0, column=2, padx=3)

    def update_radio_bg(self):
        selected = self.section_var.get()
        for rb, sec in zip(self.section_radiobuttons, self.sections):
            if rb['state'] == 'disabled':
                rb.config(bg="#e0e0e0", fg="#b0b0b0", activebackground="#e0e0e0", activeforeground="#b0b0b0")
            elif selected == sec:
                rb.config(bg="#2196f3", fg="white", activebackground="#2196f3", activeforeground="white")
            else:
                rb.config(bg="#d9d9d9", fg="black", activebackground="#d9d9d9", activeforeground="black")

    def update_cmd_list(self):
        self.update_radio_bg()
        section = self.section_var.get()
        # 更新說明文字
        self.section_description.config(text=self.get_section_description(section))
        # 重新讀取 command.txt
        self.parent.commands_by_section = self.parent.handlers.parse_commands_by_section()
        cmds = self.parent.commands_by_section.get(section, {})
        if not cmds and section != '全部指令':  # 如果沒有找到對應分類的指令，使用全部指令
            cmds = self.parent.commands_by_section.get('全部指令', {})
        self.combobox_cmd['values'] = list(cmds.keys())
        # 自動選中第一個指令
        if cmds:
            first_cmd = list(cmds.keys())[0]
            self.combobox_cmd.set(first_cmd)
        else:
            self.combobox_cmd.set('')

    def update_end_strings(self):
        try:
            end_strings = json.loads(self.parent.setup.get('Available_End_Strings', '["root"]'))
        except Exception:
            end_strings = ['root']
        self.combobox_end['values'] = end_strings

    def on_cmd_selected(self):
        """當指令被選中時，更新說明"""
        try:
            selected_cmd = self.combobox_cmd.get()
            section = self.section_var.get()
            
            if not selected_cmd:
                return
                
            # 獲取指令內容
            cmd_content = self.parent.commands_by_section.get(section, {}).get(selected_cmd, '')
            
            # 如果在當前分類中找不到，嘗試在全部指令中查找
            if not cmd_content and section != '全部指令':
                cmd_content = self.parent.commands_by_section.get('全部指令', {}).get(selected_cmd, '')
                
            # 更新說明文字，顯示指令內容
            if cmd_content:
                self.section_description.config(text=f"指令內容: {cmd_content}")
            else:
                self.section_description.config(text="無法獲取指令內容")
                
        except Exception as e:
            print(f"[ERROR] 更新指令說明時發生錯誤: {e}")
            self.section_description.config(text="更新說明時發生錯誤") 